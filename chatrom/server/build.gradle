buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'

    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'

group = 'com.gino.chatrom'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

def grpcVersion = '1.14.0'

dependencies {
    compile "io.grpc:grpc-netty-shaded:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile('org.springframework.boot:spring-boot-starter')
    compileOnly('org.projectlombok:lombok')
    compile('org.lognet:grpc-spring-boot-starter:2.4.0')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

//sourceSets {
//    main {
//        proto {
//            // In addition to the default 'src/main/proto'
//            // srcDir 'src/main/protobuf'
//            // In addition to the default '**/*.proto' (use with caution).
//            // Using an extension other than 'proto' is NOT recommended,
//            // because when proto files are published along with class files, we can
//            // only tell the type of a file from its extension.
//            // include '**/*.protodevel'
//        }
//        java {
//        }
//    }
//    test {
//        proto {
//            // In addition to the default 'src/test/proto'
//            // srcDir 'src/test/protocolbuffers'
//        }
//    }
//}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.6.0'
        //path = '/usr/local/bin/protoc'
    }
    // Configure the codegen plugins
    plugins {
        // Define a plugin with name 'grpc'
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            // or
            // path = 'tools/protoc-gen-grpc-java'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}
